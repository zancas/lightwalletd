// Copyright (c) 2019-2020 The Zcash developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: darkside.proto

package walletrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DarksideMetaState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaplingActivation int32  `protobuf:"varint,1,opt,name=saplingActivation,proto3" json:"saplingActivation,omitempty"`
	BranchID          string `protobuf:"bytes,2,opt,name=branchID,proto3" json:"branchID,omitempty"`
	ChainName         string `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *DarksideMetaState) Reset() {
	*x = DarksideMetaState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkside_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DarksideMetaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DarksideMetaState) ProtoMessage() {}

func (x *DarksideMetaState) ProtoReflect() protoreflect.Message {
	mi := &file_darkside_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DarksideMetaState.ProtoReflect.Descriptor instead.
func (*DarksideMetaState) Descriptor() ([]byte, []int) {
	return file_darkside_proto_rawDescGZIP(), []int{0}
}

func (x *DarksideMetaState) GetSaplingActivation() int32 {
	if x != nil {
		return x.SaplingActivation
	}
	return 0
}

func (x *DarksideMetaState) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *DarksideMetaState) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type DarksideBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block string `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *DarksideBlock) Reset() {
	*x = DarksideBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkside_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DarksideBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DarksideBlock) ProtoMessage() {}

func (x *DarksideBlock) ProtoReflect() protoreflect.Message {
	mi := &file_darkside_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DarksideBlock.ProtoReflect.Descriptor instead.
func (*DarksideBlock) Descriptor() ([]byte, []int) {
	return file_darkside_proto_rawDescGZIP(), []int{1}
}

func (x *DarksideBlock) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type DarksideBlocksURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DarksideBlocksURL) Reset() {
	*x = DarksideBlocksURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkside_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DarksideBlocksURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DarksideBlocksURL) ProtoMessage() {}

func (x *DarksideBlocksURL) ProtoReflect() protoreflect.Message {
	mi := &file_darkside_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DarksideBlocksURL.ProtoReflect.Descriptor instead.
func (*DarksideBlocksURL) Descriptor() ([]byte, []int) {
	return file_darkside_proto_rawDescGZIP(), []int{2}
}

func (x *DarksideBlocksURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// A single transaction that should appear to be mined at the given height.
type DarksideTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height      int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Transaction string `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *DarksideTx) Reset() {
	*x = DarksideTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkside_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DarksideTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DarksideTx) ProtoMessage() {}

func (x *DarksideTx) ProtoReflect() protoreflect.Message {
	mi := &file_darkside_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DarksideTx.ProtoReflect.Descriptor instead.
func (*DarksideTx) Descriptor() ([]byte, []int) {
	return file_darkside_proto_rawDescGZIP(), []int{3}
}

func (x *DarksideTx) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DarksideTx) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

var File_darkside_proto protoreflect.FileDescriptor

var file_darkside_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x11, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x61, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x61, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x61,
	0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x46, 0x0a, 0x0a, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x54, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xcd, 0x03, 0x0a, 0x10, 0x44, 0x61,
	0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x1c, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x58, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x2e,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x54, 0x78,
	0x12, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64,
	0x65, 0x54, 0x78, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0b, 0x2e, 0x3b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x72, 0x70, 0x63, 0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_darkside_proto_rawDescOnce sync.Once
	file_darkside_proto_rawDescData = file_darkside_proto_rawDesc
)

func file_darkside_proto_rawDescGZIP() []byte {
	file_darkside_proto_rawDescOnce.Do(func() {
		file_darkside_proto_rawDescData = protoimpl.X.CompressGZIP(file_darkside_proto_rawDescData)
	})
	return file_darkside_proto_rawDescData
}

var file_darkside_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_darkside_proto_goTypes = []interface{}{
	(*DarksideMetaState)(nil), // 0: cash.z.wallet.sdk.rpc.DarksideMetaState
	(*DarksideBlock)(nil),     // 1: cash.z.wallet.sdk.rpc.DarksideBlock
	(*DarksideBlocksURL)(nil), // 2: cash.z.wallet.sdk.rpc.DarksideBlocksURL
	(*DarksideTx)(nil),        // 3: cash.z.wallet.sdk.rpc.DarksideTx
	(*Empty)(nil),             // 4: cash.z.wallet.sdk.rpc.Empty
	(*RawTransaction)(nil),    // 5: cash.z.wallet.sdk.rpc.RawTransaction
}
var file_darkside_proto_depIdxs = []int32{
	0, // 0: cash.z.wallet.sdk.rpc.DarksideStreamer.SetMetaState:input_type -> cash.z.wallet.sdk.rpc.DarksideMetaState
	1, // 1: cash.z.wallet.sdk.rpc.DarksideStreamer.SetBlocks:input_type -> cash.z.wallet.sdk.rpc.DarksideBlock
	2, // 2: cash.z.wallet.sdk.rpc.DarksideStreamer.SetBlocksURL:input_type -> cash.z.wallet.sdk.rpc.DarksideBlocksURL
	3, // 3: cash.z.wallet.sdk.rpc.DarksideStreamer.SetTx:input_type -> cash.z.wallet.sdk.rpc.DarksideTx
	4, // 4: cash.z.wallet.sdk.rpc.DarksideStreamer.GetIncomingTransactions:input_type -> cash.z.wallet.sdk.rpc.Empty
	4, // 5: cash.z.wallet.sdk.rpc.DarksideStreamer.SetMetaState:output_type -> cash.z.wallet.sdk.rpc.Empty
	4, // 6: cash.z.wallet.sdk.rpc.DarksideStreamer.SetBlocks:output_type -> cash.z.wallet.sdk.rpc.Empty
	4, // 7: cash.z.wallet.sdk.rpc.DarksideStreamer.SetBlocksURL:output_type -> cash.z.wallet.sdk.rpc.Empty
	4, // 8: cash.z.wallet.sdk.rpc.DarksideStreamer.SetTx:output_type -> cash.z.wallet.sdk.rpc.Empty
	5, // 9: cash.z.wallet.sdk.rpc.DarksideStreamer.GetIncomingTransactions:output_type -> cash.z.wallet.sdk.rpc.RawTransaction
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_darkside_proto_init() }
func file_darkside_proto_init() {
	if File_darkside_proto != nil {
		return
	}
	file_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_darkside_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DarksideMetaState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkside_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DarksideBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkside_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DarksideBlocksURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkside_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DarksideTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_darkside_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_darkside_proto_goTypes,
		DependencyIndexes: file_darkside_proto_depIdxs,
		MessageInfos:      file_darkside_proto_msgTypes,
	}.Build()
	File_darkside_proto = out.File
	file_darkside_proto_rawDesc = nil
	file_darkside_proto_goTypes = nil
	file_darkside_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DarksideStreamerClient is the client API for DarksideStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DarksideStreamerClient interface {
	// Set (some of) the values that should be returned by GetLightdInfo()
	SetMetaState(ctx context.Context, in *DarksideMetaState, opts ...grpc.CallOption) (*Empty, error)
	// SetBlocks() replaces the specified range of blocks (gaps not allowed);
	// for example, you can set blocks 1000-1006, do some tests, then set blocks
	// 1003-1004. This preserves blocks 1000-1002, replaces blocks 1003-1004,
	// and removes blocks 1005-1006. This can be used to simulate a chain reorg.
	// Blocks are hex-encoded.
	SetBlocks(ctx context.Context, opts ...grpc.CallOption) (DarksideStreamer_SetBlocksClient, error)
	// This is the same as SetBlocks(), except the blocks are fetched
	// from the given URL. Blocks are one per line, hex-encoded (not JSON).
	// SetBlocksURL("file:testdata/darkside/init-blocks") is done at startup.
	SetBlocksURL(ctx context.Context, in *DarksideBlocksURL, opts ...grpc.CallOption) (*Empty, error)
	// SetTx() allows the test coordinator to submit a list of transactions and
	// for each indicate in which block it should appear.
	// For example,
	//   tx1, block=1001
	//   tx2, block=1002
	//   tx3, block=1002
	// Then use Setblocks(1000-1005): block 1001 will include tx1 (plus
	// any transactions were part of that block to begin with); tx2 and tx3
	// will appear in block 1002. Blocks 1003-1005 will be returned as submitted.
	//
	// If you first set a range of blocks, then submit transactions within that
	// range, it's too late for them to be included in those blocks. If blocks
	// are resubmitted, then those transactions are included in those blocks.
	//
	// Calling GetTransaction() on tx1-3 will return those transactions, and
	// GetTransaction() will also return any transactions that were part of
	// the submitted blocks.
	//
	// Each call to SetTx() completely replaces the stored transaction set.
	SetTx(ctx context.Context, opts ...grpc.CallOption) (DarksideStreamer_SetTxClient, error)
	// Calls to SendTransaction() are accepted and stored; this method returns
	// all transactions that were previously submitted. This enables the
	// following kind of test, for example:
	//   1. wallet submits a transaction
	//   2. Test coordinator retrives the transaction using this interface
	//   3. Test coordinator submits the transaction using SetTx()
	//   4. Darksidewalletd simulates the transaction appearing in a mined block
	//
	GetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_GetIncomingTransactionsClient, error)
}

type darksideStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewDarksideStreamerClient(cc grpc.ClientConnInterface) DarksideStreamerClient {
	return &darksideStreamerClient{cc}
}

func (c *darksideStreamerClient) SetMetaState(ctx context.Context, in *DarksideMetaState, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetMetaState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darksideStreamerClient) SetBlocks(ctx context.Context, opts ...grpc.CallOption) (DarksideStreamer_SetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DarksideStreamer_serviceDesc.Streams[0], "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &darksideStreamerSetBlocksClient{stream}
	return x, nil
}

type DarksideStreamer_SetBlocksClient interface {
	Send(*DarksideBlock) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type darksideStreamerSetBlocksClient struct {
	grpc.ClientStream
}

func (x *darksideStreamerSetBlocksClient) Send(m *DarksideBlock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *darksideStreamerSetBlocksClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darksideStreamerClient) SetBlocksURL(ctx context.Context, in *DarksideBlocksURL, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetBlocksURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darksideStreamerClient) SetTx(ctx context.Context, opts ...grpc.CallOption) (DarksideStreamer_SetTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DarksideStreamer_serviceDesc.Streams[1], "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &darksideStreamerSetTxClient{stream}
	return x, nil
}

type DarksideStreamer_SetTxClient interface {
	Send(*DarksideTx) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type darksideStreamerSetTxClient struct {
	grpc.ClientStream
}

func (x *darksideStreamerSetTxClient) Send(m *DarksideTx) error {
	return x.ClientStream.SendMsg(m)
}

func (x *darksideStreamerSetTxClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darksideStreamerClient) GetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_GetIncomingTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DarksideStreamer_serviceDesc.Streams[2], "/cash.z.wallet.sdk.rpc.DarksideStreamer/GetIncomingTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &darksideStreamerGetIncomingTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarksideStreamer_GetIncomingTransactionsClient interface {
	Recv() (*RawTransaction, error)
	grpc.ClientStream
}

type darksideStreamerGetIncomingTransactionsClient struct {
	grpc.ClientStream
}

func (x *darksideStreamerGetIncomingTransactionsClient) Recv() (*RawTransaction, error) {
	m := new(RawTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DarksideStreamerServer is the server API for DarksideStreamer service.
type DarksideStreamerServer interface {
	// Set (some of) the values that should be returned by GetLightdInfo()
	SetMetaState(context.Context, *DarksideMetaState) (*Empty, error)
	// SetBlocks() replaces the specified range of blocks (gaps not allowed);
	// for example, you can set blocks 1000-1006, do some tests, then set blocks
	// 1003-1004. This preserves blocks 1000-1002, replaces blocks 1003-1004,
	// and removes blocks 1005-1006. This can be used to simulate a chain reorg.
	// Blocks are hex-encoded.
	SetBlocks(DarksideStreamer_SetBlocksServer) error
	// This is the same as SetBlocks(), except the blocks are fetched
	// from the given URL. Blocks are one per line, hex-encoded (not JSON).
	// SetBlocksURL("file:testdata/darkside/init-blocks") is done at startup.
	SetBlocksURL(context.Context, *DarksideBlocksURL) (*Empty, error)
	// SetTx() allows the test coordinator to submit a list of transactions and
	// for each indicate in which block it should appear.
	// For example,
	//   tx1, block=1001
	//   tx2, block=1002
	//   tx3, block=1002
	// Then use Setblocks(1000-1005): block 1001 will include tx1 (plus
	// any transactions were part of that block to begin with); tx2 and tx3
	// will appear in block 1002. Blocks 1003-1005 will be returned as submitted.
	//
	// If you first set a range of blocks, then submit transactions within that
	// range, it's too late for them to be included in those blocks. If blocks
	// are resubmitted, then those transactions are included in those blocks.
	//
	// Calling GetTransaction() on tx1-3 will return those transactions, and
	// GetTransaction() will also return any transactions that were part of
	// the submitted blocks.
	//
	// Each call to SetTx() completely replaces the stored transaction set.
	SetTx(DarksideStreamer_SetTxServer) error
	// Calls to SendTransaction() are accepted and stored; this method returns
	// all transactions that were previously submitted. This enables the
	// following kind of test, for example:
	//   1. wallet submits a transaction
	//   2. Test coordinator retrives the transaction using this interface
	//   3. Test coordinator submits the transaction using SetTx()
	//   4. Darksidewalletd simulates the transaction appearing in a mined block
	//
	GetIncomingTransactions(*Empty, DarksideStreamer_GetIncomingTransactionsServer) error
}

// UnimplementedDarksideStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedDarksideStreamerServer struct {
}

func (*UnimplementedDarksideStreamerServer) SetMetaState(context.Context, *DarksideMetaState) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetaState not implemented")
}
func (*UnimplementedDarksideStreamerServer) SetBlocks(DarksideStreamer_SetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SetBlocks not implemented")
}
func (*UnimplementedDarksideStreamerServer) SetBlocksURL(context.Context, *DarksideBlocksURL) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlocksURL not implemented")
}
func (*UnimplementedDarksideStreamerServer) SetTx(DarksideStreamer_SetTxServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTx not implemented")
}
func (*UnimplementedDarksideStreamerServer) GetIncomingTransactions(*Empty, DarksideStreamer_GetIncomingTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIncomingTransactions not implemented")
}

func RegisterDarksideStreamerServer(s *grpc.Server, srv DarksideStreamerServer) {
	s.RegisterService(&_DarksideStreamer_serviceDesc, srv)
}

func _DarksideStreamer_SetMetaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DarksideMetaState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarksideStreamerServer).SetMetaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetMetaState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarksideStreamerServer).SetMetaState(ctx, req.(*DarksideMetaState))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarksideStreamer_SetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DarksideStreamerServer).SetBlocks(&darksideStreamerSetBlocksServer{stream})
}

type DarksideStreamer_SetBlocksServer interface {
	SendAndClose(*Empty) error
	Recv() (*DarksideBlock, error)
	grpc.ServerStream
}

type darksideStreamerSetBlocksServer struct {
	grpc.ServerStream
}

func (x *darksideStreamerSetBlocksServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *darksideStreamerSetBlocksServer) Recv() (*DarksideBlock, error) {
	m := new(DarksideBlock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DarksideStreamer_SetBlocksURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DarksideBlocksURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarksideStreamerServer).SetBlocksURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetBlocksURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarksideStreamerServer).SetBlocksURL(ctx, req.(*DarksideBlocksURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarksideStreamer_SetTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DarksideStreamerServer).SetTx(&darksideStreamerSetTxServer{stream})
}

type DarksideStreamer_SetTxServer interface {
	SendAndClose(*Empty) error
	Recv() (*DarksideTx, error)
	grpc.ServerStream
}

type darksideStreamerSetTxServer struct {
	grpc.ServerStream
}

func (x *darksideStreamerSetTxServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *darksideStreamerSetTxServer) Recv() (*DarksideTx, error) {
	m := new(DarksideTx)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DarksideStreamer_GetIncomingTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarksideStreamerServer).GetIncomingTransactions(m, &darksideStreamerGetIncomingTransactionsServer{stream})
}

type DarksideStreamer_GetIncomingTransactionsServer interface {
	Send(*RawTransaction) error
	grpc.ServerStream
}

type darksideStreamerGetIncomingTransactionsServer struct {
	grpc.ServerStream
}

func (x *darksideStreamerGetIncomingTransactionsServer) Send(m *RawTransaction) error {
	return x.ServerStream.SendMsg(m)
}

var _DarksideStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cash.z.wallet.sdk.rpc.DarksideStreamer",
	HandlerType: (*DarksideStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMetaState",
			Handler:    _DarksideStreamer_SetMetaState_Handler,
		},
		{
			MethodName: "SetBlocksURL",
			Handler:    _DarksideStreamer_SetBlocksURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetBlocks",
			Handler:       _DarksideStreamer_SetBlocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTx",
			Handler:       _DarksideStreamer_SetTx_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIncomingTransactions",
			Handler:       _DarksideStreamer_GetIncomingTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "darkside.proto",
}
